// import 'package:flutter/material.dart';
// import 'package:steganography/screens/decode_page.dart';
// import 'package:steganography/screens/encode_page.dart';
//
// void main() {
//   runApp(MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'Steganography App',
//       theme: ThemeData(
//         primarySwatch: Colors.blue,
//       ),
//       home: MyHomePage(),
//     );
//   }
// }
//
// class MyHomePage extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text('Steganography App'),
//       ),
//       body: Center(
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             ElevatedButton(
//               onPressed: () {
//                 Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (context) => EncodingPage()),
//                 );
//               },
//               child: Text('Encode Text'),
//             ),
//             SizedBox(height: 20),
//             ElevatedButton(
//               onPressed: () {
//                 Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (context) => DecodingPage()),
//                 );
//               },
//               child: Text('Decode Text'),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
import 'package:flutter/material.dart';
import 'package:steganography/stegoservice.dart'; // Import your service file

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: StegoScreen(),
    );
  }
}

class StegoScreen extends StatefulWidget {
  @override
  _StegoScreenState createState() => _StegoScreenState();
}

class _StegoScreenState extends State<StegoScreen> {
  final StegoService _stegoService = StegoService();
  final _passwordController = TextEditingController();
  final _encodedTextController = TextEditingController();
  final _retrieveIdController = TextEditingController();
  final _retrievePasswordController = TextEditingController();

  String? _storedId;
  String? _retrievedText;

  Future<void> _storeData() async {
    String password = _passwordController.text;
    String encodedText = _encodedTextController.text;

    if (password.isEmpty || encodedText.isEmpty) {
      setState(() {
        _storedId = 'Error: All fields required';
      });
      return;
    }

    String? id = await _stegoService.storeData(password, encodedText);
    setState(() {
      _storedId = id ?? 'Error storing data';
    });
  }

  Future<void> _retrieveData() async {
    String id = _retrieveIdController.text;
    String password = _retrievePasswordController.text;

    if (id.isEmpty || password.isEmpty) {
      setState(() {
        _retrievedText = 'Error: All fields required';
      });
      return;
    }

    String? text = await _stegoService.retrieveData(id, password);
    setState(() {
      _retrievedText = text ?? 'Error retrieving data';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Stego Service')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Store section
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: 'Password'),
            ),
            TextField(
              controller: _encodedTextController,
              decoration: InputDecoration(labelText: 'Encoded Text'),
            ),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            Text(_storedId ?? ''),

            SizedBox(height: 20),

            // Retrieve section
            TextField(
              controller: _retrieveIdController,
              decoration: InputDecoration(labelText: 'Data ID'),
            ),
            TextField(
              controller: _retrievePasswordController,
              
              decoration: InputDecoration(labelText: 'Password'),
            ),
            ElevatedButton(
              onPressed: _retrieveData,
              child: Text('Retrieve Data'),
            ),
            Text(_retrievedText ?? ''),
          ],
        ),
      ),
    );
  }
}
